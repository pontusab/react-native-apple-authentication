{"version":3,"file":"AppleAuthenticationButton.js","sourceRoot":"","sources":["../src/AppleAuthenticationButton.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,sCAAsC,EACtC,6CAA6C,EAC7C,sCAAsC,EACtC,wCAAwC,EACxC,+CAA+C,EAC/C,wCAAwC,EACzC,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAEL,8BAA8B,EAC9B,6BAA6B,EAC9B,MAAM,6BAA6B,CAAC;AAErC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,yBAAyB,GAE3B,KAAK,CAAC,EAAE;IACV,IAAI,CAAC,sCAAsC,EAAE;QAC3C,iBAAiB;QACjB,mEAAmE;QACnE,IAAI;QACJ,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAEjE,MAAM,kCAAkC,GAAG,qBAAqB,CAC9D,UAAU,EACV,WAAW,CACZ,CAAC;IAEF,OAAO,CACL,CAAC,kCAAkC,CACjC,aAAa,CAAC,CAAC,OAAO,CAAC,CACvB,IAAI,SAAS,CAAC,EACd,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAElB;IACF,CAAC,6BAA6B,CAAC,OAAO,CAAC,EAAE;QACvC,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,sCAAsC;QAC9E,CAAC,8BAA8B,CAAC,aAAa,CAAC,EAAE,6CAA6C;QAC7F,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,sCAAsC;KAC/E;IACD,CAAC,6BAA6B,CAAC,QAAQ,CAAC,EAAE;QACxC,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,wCAAwC;QAChF,CAAC,8BAA8B,CAAC,aAAa,CAAC,EAAE,+CAA+C;QAC/F,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,wCAAwC;KACjF;CACF,CAAC;AAEF,SAAS,qBAAqB,CAC5B,IAAmC,EACnC,KAAqC;IAErC,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC;AAED,eAAe,yBAAyB,CAAC","sourcesContent":["import React from 'react';\nimport {\n  RNAppleAuthenticationButtonSignInWhite,\n  RNAppleAuthenticationButtonSignInWhiteOutline,\n  RNAppleAuthenticationButtonSignInBlack,\n  RNAppleAuthenticationButtonContinueWhite,\n  RNAppleAuthenticationButtonContinueWhiteOutline,\n  RNAppleAuthenticationButtonContinueBlack\n} from './RNAppleAuthenticationButton';\n\nimport {\n  AppleAuthenticationButtonProps,\n  AppleAuthenticationButtonStyle,\n  AppleAuthenticationButtonType\n} from './AppleAuthentication.types';\n\n/**\n * This component displays the proprietary \"Sign In with Apple\" / \"Continue with Apple\" button on\n * your screen. The App Store Guidelines require you to use this component to start the sign in\n * process instead of a custom button. You can customize the design of the button using the\n * properties. You should start the sign in process when the `onPress` property is called.\n *\n * You should only attempt to render this if `AppleAuthentication.isAvailableAsync()` resolves to\n * true. This component will render nothing if it is not available and you will get a warning if\n * `__DEV__ === true`.\n *\n * The properties of this component extend from `View`; however, you should not attempt to set\n * `backgroundColor` or `borderRadius` with the `style` property. This will not work and is against\n * the App Store Guidelines. Instead, you should use the `buttonStyle` property to choose one of the\n * predefined color styles and the `cornerRadius` property to change the border radius of the\n * button.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidbutton)\n * for more details.\n */\nconst AppleAuthenticationButton: React.FunctionComponent<\n  AppleAuthenticationButtonProps\n> = props => {\n  if (!RNAppleAuthenticationButtonSignInWhite) {\n    // if (__DEV__) {\n    //   console.warn(\"'AppleAuthenticationButton' is not available.\");\n    // }\n    return null;\n  }\n\n  const { onPress, buttonStyle, buttonType, ...restProps } = props;\n\n  const AppleAuthenticationButtonComponent = selectButtonComponent(\n    buttonType,\n    buttonStyle\n  );\n\n  return (\n    <AppleAuthenticationButtonComponent\n      onButtonPress={onPress}\n      {...restProps}\n    />\n  );\n};\n\nconst ButtonComponents: {\n  [type: number]: { [style: number]: React.ElementType };\n} = {\n  [AppleAuthenticationButtonType.SIGN_IN]: {\n    [AppleAuthenticationButtonStyle.WHITE]: RNAppleAuthenticationButtonSignInWhite,\n    [AppleAuthenticationButtonStyle.WHITE_OUTLINE]: RNAppleAuthenticationButtonSignInWhiteOutline,\n    [AppleAuthenticationButtonStyle.BLACK]: RNAppleAuthenticationButtonSignInBlack\n  },\n  [AppleAuthenticationButtonType.CONTINUE]: {\n    [AppleAuthenticationButtonStyle.WHITE]: RNAppleAuthenticationButtonContinueWhite,\n    [AppleAuthenticationButtonStyle.WHITE_OUTLINE]: RNAppleAuthenticationButtonContinueWhiteOutline,\n    [AppleAuthenticationButtonStyle.BLACK]: RNAppleAuthenticationButtonContinueBlack\n  }\n};\n\nfunction selectButtonComponent(\n  type: AppleAuthenticationButtonType,\n  style: AppleAuthenticationButtonStyle\n): React.ElementType {\n  return ButtonComponents[type][style];\n}\n\nexport default AppleAuthenticationButton;\n"]}