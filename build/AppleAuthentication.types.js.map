{"version":3,"file":"AppleAuthentication.types.js","sourceRoot":"","sources":["../src/AppleAuthentication.types.ts"],"names":[],"mappings":"AAqJA;;;;;;;;;;GAUG;AACH,MAAM,CAAN,IAAY,wBAGX;AAHD,WAAY,wBAAwB;IAClC,iFAAa,CAAA;IACb,yEAAS,CAAA;AACX,CAAC,EAHW,wBAAwB,KAAxB,wBAAwB,QAGnC;AAED,MAAM,CAAN,IAAY,4BAQX;AARD,WAAY,4BAA4B;IACtC;;OAEG;IACH,uFAAY,CAAA;IACZ,iFAAS,CAAA;IACT,qFAAW,CAAA;IACX,mFAAU,CAAA;AACZ,CAAC,EARW,4BAA4B,KAA5B,4BAA4B,QAQvC;AAED;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,kCAKX;AALD,WAAY,kCAAkC;IAC5C,iGAAW,CAAA;IACX,uGAAc,CAAA;IACd,qGAAa,CAAA;IACb,yGAAe,CAAA;AACjB,CAAC,EALW,kCAAkC,KAAlC,kCAAkC,QAK7C;AAED;;;;;;;;GAQG;AACH,MAAM,CAAN,IAAY,sCAIX;AAJD,WAAY,sCAAsC;IAChD,iHAAe,CAAA;IACf,yGAAW,CAAA;IACX,iHAAe,CAAA;AACjB,CAAC,EAJW,sCAAsC,KAAtC,sCAAsC,QAIjD;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,6BAGX;AAHD,WAAY,6BAA6B;IACvC,uFAAW,CAAA;IACX,yFAAY,CAAA;AACd,CAAC,EAHW,6BAA6B,KAA7B,6BAA6B,QAGxC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,8BAIX;AAJD,WAAY,8BAA8B;IACxC,qFAAS,CAAA;IACT,qGAAiB,CAAA;IACjB,qFAAS,CAAA;AACX,CAAC,EAJW,8BAA8B,KAA9B,8BAA8B,QAIzC","sourcesContent":["import { StyleProp, ViewStyle } from 'react-native';\n\nexport type AppleAuthenticationButtonProps = {\n  onPress: () => void;\n  buttonType: AppleAuthenticationButtonType;\n  buttonStyle: AppleAuthenticationButtonStyle;\n  cornerRadius?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.signInAsync()`. None of\n * these options are required.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationSignInOptions = {\n  /**\n   * The scope of personal information to which your app is requesting access. The user can choose\n   * to deny your app access to any scope at the time of logging in.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.refreshAsync()`. You must\n * include the ID string of the user whose credentials you'd like to refresh.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationRefreshOptions = {\n  user: string;\n\n  /**\n   * The scope of personal information to which your app is requesting access. The user can choose\n   * to deny your app access to any scope at the time of refreshing.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.signOutAsync()`. You must\n * include the ID string of the user to sign out.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationSignOutOptions = {\n  user: string;\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n};\n\n/**\n * The user credentials returned from a successful call to `AppleAuthentication.signInAsync()`,\n * `AppleAuthentication.refreshAsync()`, or `AppleAuthentication.signOutAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidcredential)\n * for more details.\n */\nexport type AppleAuthenticationCredential = {\n  /**\n   * An identifier associated with the authenticated user. You can use this to check if the user is\n   * still authenticated later. This is stable and can be shared across apps released under the same\n   * development team. The same user will have a different identifier for apps released by other\n   * developers.\n   */\n  user: string;\n\n  /**\n   * An arbitrary string that your app provided as `state` in the request that generated the\n   * credential. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state: string | null;\n\n  /**\n   * The user's name. May be `null` or contain `null` values if you didn't request the `FULL_NAME`\n   * scope, if the user denied access, or if this is not the first time the user has signed into\n   * your app.\n   */\n  fullName: AppleAuthenticationFullName | null;\n\n  /**\n   * The user's email address. Might not be present if you didn't request the `EMAIL` scope. May\n   * also be null if this is not the first time the user has signed into your app. If the user chose\n   * to withhold their email address, this field will instead contain an obscured email address with\n   * an Apple domain.\n   */\n  email: string | null;\n\n  /**\n   * A value that indicates whether the user appears to the system to be a real person.\n   */\n  realUserStatus: AppleAuthenticationUserDetectionStatus;\n\n  /**\n   * A JSON Web Token (JWT) that securely communicates information about the user to your app.\n   */\n  identityToken: string | null;\n\n  /**\n   * A short-lived session token used by your app for proof of authorization when interacting with\n   * the app's server counterpart. Unlike `user`, this is ephemeral and will change each session.\n   */\n  authorizationCode: string | null;\n};\n\n/**\n * An object representing the tokenized portions of the user's full name.\n */\nexport type AppleAuthenticationFullName = {\n  namePrefix: string | null;\n  givenName: string | null;\n  middleName: string | null;\n  familyName: string | null;\n  nameSuffix: string | null;\n  nickname: string | null;\n};\n\nexport type AppleAuthenticationRevokeListener = () => void;\n\n/**\n * Scopes you can request when calling `AppleAuthentication.signInAsync()` or\n * `AppleAuthentication.refreshAsync()`.\n *\n * @note Note that it is possible that you will not be granted all of the scopes which you request.\n * You will still need to handle null values for any fields you request.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationscope)\n * for more details.\n */\nexport enum AppleAuthenticationScope {\n  FULL_NAME = 0,\n  EMAIL = 1\n}\n\nexport enum AppleAuthenticationOperation {\n  /**\n   * An operation that depends on the particular kind of credential provider.\n   */\n  IMPLICIT = 0,\n  LOGIN = 1,\n  REFRESH = 2,\n  LOGOUT = 3\n}\n\n/**\n * The state of the credential when checked with `AppleAuthentication.getCredentialStateAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovidercredentialstate)\n * for more details.\n */\nexport enum AppleAuthenticationCredentialState {\n  REVOKED = 0,\n  AUTHORIZED = 1,\n  NOT_FOUND = 2,\n  TRANSFERRED = 3\n}\n\n/**\n * A value that indicates whether the user appears to be a real person. You get this in the\n * realUserStatus property of a `Credential` object. It can be used as one metric to help prevent\n * fraud.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus)\n * for more details.\n */\nexport enum AppleAuthenticationUserDetectionStatus {\n  UNSUPPORTED = 0,\n  UNKNOWN = 1,\n  LIKELY_REAL = 2\n}\n\n/**\n * Controls the predefined text shown on the authentication button.\n */\nexport enum AppleAuthenticationButtonType {\n  SIGN_IN = 0,\n  CONTINUE = 1\n}\n\n/**\n * Controls the predefined style of the authenticating button.\n */\nexport enum AppleAuthenticationButtonStyle {\n  WHITE = 0,\n  WHITE_OUTLINE = 1,\n  BLACK = 2\n}\n"]}